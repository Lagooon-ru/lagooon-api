# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type MediaEntity {
  id: String!
  isActive: Boolean!
  isArchived: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  author: UserEntity!
  asset_id: String!
  public_id: String!
  path: String!
  format: String!
  size: String
  height: String
  width: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type ChatEntity {
  id: String!
  isActive: Boolean!
  isArchived: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  type: String!
  title: String!
  description: String!
  members: [UserEntity!]!
  content: [MessageEntity!]!
}

type MessageEntity {
  id: String!
  isActive: Boolean!
  isArchived: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  sender: UserEntity!
  message: String!
}

type UserEntity {
  id: String!
  isActive: Boolean!
  isArchived: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  role: String!
  name: String
  username: String!
  bio: String
  email: String!
  emailConfirmed: Boolean!
  phone: String
  phoneConfirmed: Boolean!
  isVerified: Boolean!
  avatar: MediaEntity
  follow: [UserEntity!]
  chats: [ChatEntity!]
}

type TPagination {
  total: Float!
  limit: Float!
  page: Float!
}

type TUsers {
  data: [UserEntity!]!
  pagination: TPagination!
}

type TFollow {
  status: Boolean
}

type MediasDto {
  data: [MediaEntity!]!
  pagination: TPagination!
}

type TLogin {
  user: UserEntity!
  access_token: String!
}

type TLogout {
  status: Boolean!
}

type TForget {
  status: Boolean!
}

type PostEntity {
  id: String!
  isActive: Boolean!
  isArchived: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  author: UserEntity!
  title: String!
  description: String!
  type: String!
  photos: [MediaEntity!]!
  likes: [UserEntity!]!
  score: Float!
  size: String!
  comments: [PostCommentEntity!]!
}

type PostCommentEntity {
  id: String!
  isActive: Boolean!
  isArchived: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  author: UserEntity!
  parent: PostCommentEntity!
  likes: [UserEntity!]!
  comment: String!
}

type PostsDto {
  data: [PostEntity!]!
  pagination: TPagination!
}

type StoryEntity {
  id: String!
  isActive: Boolean!
  isArchived: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  author: String!
  title: String!
  description: String!
  type: String!
  tags: [String!]!
  photos: [MediaEntity!]!
  size: String!
}

type StoriesDto {
  data: [StoryEntity!]!
  pagination: TPagination!
}

type AppEntity {
  id: String!
  isActive: Boolean!
  isArchived: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  version: String!
  image: MediaEntity!
  isActual: Boolean!
  title: String!
  description: String!
}

type TVersion {
  id: String!
  isActive: Boolean!
  isArchived: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  version: String!
  image: MediaEntity!
  isActual: Boolean!
  title: String!
  description: String!
  img: String!
}

type FeedEntity {
  id: String!
  isActive: Boolean!
  isArchived: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  author: UserEntity!
  caption: String!
  photos: [MediaEntity!]!
  likes: [UserEntity!]!
  score: Float!
}

type FeedCommentEntity {
  id: String!
  isActive: Boolean!
  isArchived: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  feed: FeedEntity!
  author: UserEntity!
  parent: FeedCommentEntity!
  likes: [UserEntity!]!
  comment: String!
}

type TFeeds {
  data: [FeedEntity!]!
  pagination: TPagination!
}

type Query {
  versions: [AppEntity!]!
  info(arg: VersionDto!): TVersion!
  users(search: UsersSearchDto!): TUsers!
  user(id: String!): UserEntity!
  medias: MediasDto!
  profile: UserEntity!
  posts(search: PostsSearchDto!): PostsDto!
  stories: StoriesDto!
  story: StoryEntity!
  chats: [ChatEntity!]!
  feeds(search: FeedsSearchDto!): TFeeds!
}

input VersionDto {
  version: String!
}

input UsersSearchDto {
  pagination: PaginationDto
  sort: String
  keyword: String
}

input PaginationDto {
  limit: Float
  page: Float
}

input PostsSearchDto {
  pagination: PaginationDto
  sort: String
  keyword: String
}

input FeedsSearchDto {
  pagination: PaginationDto
  sort: String
  keyword: String
}

type Mutation {
  release(arg: ReleaseDto!): TVersion!
  follow(follow: FollowDto!): TFollow!
  upload(file: Upload!): MediaEntity!
  signup(arg: RegisterDto!): TLogin!
  emailConfirm(email: String!): TForget!
  login(arg: LoginDto!): TLogin!
  logout: TLogout!
  forget(email: String!): TForget!
  resetPassword(arg: ResetPassDto!): UserEntity!
  profileUpdate(arg: ProfileDto!): UserEntity!
  createPost(post: PostDto!): PostEntity!
  createChat(arg: CreateChatDto!): ChatEntity!
  createFeed(feed: FeedDto!): FeedEntity!
}

input ReleaseDto {
  version: String!
  image: String
  title: String!
  description: String
}

input FollowDto {
  follower: String!
  following: Boolean!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input RegisterDto {
  name: String
  bio: String
  avatar: String
  username: String!
  email: String!
  password: String!
}

input LoginDto {
  user: String!
  password: String!
}

input ResetPassDto {
  token: String!
  password: String!
}

input ProfileDto {
  email: String
  phone: String
  name: String
  bio: String
  password: String
  avatar: String
}

input PostDto {
  title: String!
  description: String
  photos: [String!]!
}

input CreateChatDto {
  type: String!
  members: [ID!]!
  title: String!
  description: String!
}

input FeedDto {
  caption: String!
  photos: [String!]!
}